ggplot(spooky_feature) +
geom_violin(aes(x=author, y=Nstop,sill=author))
ggplot(spooky_feature) +
geom_density(aes(x=num_of_negation_wrd, colour=author))
summary(spooky_feature)
ggplot(spooky_feature) +
geom_density(aes(x=num_of_negation_wrd, colour=author,fill=author))
packages.used <- c("ggplot2", "dplyr", "tibble", "tidyr",  "stringr", "tidytext", "topicmodels", "wordcloud", "ggridges")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used, intersect(installed.packages()[,1], packages.used))
# install additional packages
if(length(packages.needed) > 0) {
install.packages(packages.needed, dependencies = TRUE, repos = 'http://cran.us.r-project.org')
}
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(tidytext)
library(topicmodels)
library(wordcloud)
library(ggridges)
source("../libs/multiplot.R")
spooky <- read.csv('../data/spooky.csv', as.is = TRUE)
head(spooky)
summary(spooky)
sum(is.na(spooky))
spooky$author <- as.factor(spooky$author)
spooky_wrd <- unnest_tokens(spooky, word, text)
spooky_wrdnew <- anti_join(spooky_wrd, stop_words, by = "word")
#Wordcloud for the entire dataset
layout(matrix(c(1,1,1,2,3,4,5,5,5),3,3,byrow = T),heights = c(3,3,2))
par(mar = c(0,0,0,0))
words <- count(group_by(spooky_wrdnew, word))$word
freqs <- count(group_by(spooky_wrdnew, word))$n
wordcloud(words, freqs, max.words = 50, color = c("purple4", "red4", "black"))
#Wordcloud for each wuthor
#Function to generate dataset for each author
get_common_words_by_author <- function(x, author, remove.stopwords = FALSE){
if(remove.stopwords){
x <- x %>% dplyr::anti_join(stop_words)
}
x[x$author == author,] %>%
dplyr::count(word, sort = TRUE)
}
words_EAP <- get_common_words_by_author(x = spooky_wrd,
author = "EAP",
remove.stopwords = TRUE)
words_HPL <- get_common_words_by_author(x = spooky_wrd,
author = "HPL",
remove.stopwords = TRUE)
words_MWS <- get_common_words_by_author(x = spooky_wrd,
author = "MWS",
remove.stopwords = TRUE)
pal <- brewer.pal(6,"Dark2")
pal1 <- pal[-(1)]
pal2 <- brewer.pal(9,"BuGn")
pal3 <- pal2[-(1:4)]
#EAP
wordcloud(words_EAP$word,words_EAP$n,max.words = 50,colors =pal)
#HPL
wordcloud(words_HPL$word,words_HPL$n,max.words = 50,colors =pal)
#MWS
wordcloud(words_MWS$word,words_MWS$n,max.words = 50,colors =pal)
#Title
plot.new()
text(x=0, y=1, c
frequency <- count(spooky_wrdnew, author, word)
tf_idf    <- bind_tf_idf(frequency, word, author, n)
tf_idf <- arrange(tf_idf, desc(tf_idf))
tf_idf <- mutate(tf_idf, word = factor(word, levels = rev(unique(word))))
tf_idf_30 <- top_n(tf_idf, 30, tf_idf)
ggplot(tf_idf_30) +
geom_col(aes(word, tf_idf, fill = author)) +
labs(x = NULL, y = "TF-IDF values") +
theme(legend.position = "top", axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9))
tf_idf <- ungroup(top_n(group_by(tf_idf, author), 20, tf_idf))
ggplot(tf_idf) +
geom_col(aes(word, tf_idf, fill = author)) +
labs(x = NULL, y = "tf-idf") +
theme(legend.position = "none") +
facet_wrap(~ author, ncol = 3, scales = "free") +
coord_flip() +
labs(y = "TF-IDF values")
t2 <- spooky %>% select(author, text) %>% unnest_tokens(bigram, text, token = "ngrams", n = 2)
sample_n(t2, 5)
bi_sep <- t2 %>%
separate(bigram, c("word1", "word2"), sep = " ")
bi_filt <- bi_sep %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
# for later
bigram_counts <- bi_filt %>%
count(word1, word2, sort = TRUE)
t2 <- bi_filt %>%
unite(bigram, word1, word2, sep = " ")
t2_tf_idf <- t2 %>%
count(author, bigram) %>%
bind_tf_idf(bigram, author, n) %>%
arrange(desc(tf_idf))
t2_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(author) %>%
top_n(10, tf_idf) %>%
ungroup() %>%
ggplot(aes(bigram, tf_idf, fill = author)) +
geom_col() +
labs(x = NULL, y = "TF-IDF values") +
theme(legend.position = "none") +
facet_wrap(~ author, ncol = 3, scales = "free") +
coord_flip()
spooky$first_two<-word(spooky$text, 1,2, sep=" ")
spooky_first_two<-spooky%>%
count(author,first_two)%>%
arrange(desc(n,author))
spooky_first_two1 <- ungroup(top_n(group_by(spooky_first_two, author), 20, n))
#layout(matrix(c(1,2),2,1,byrow = T),heights = c(2,3))
#par(mar = c(0,0,0,0))
#par(mfrow=c(2,1))
p1<-spooky_first_two1 %>%
ggplot(aes(reorder(first_two,n), n, fill = author), position = position_stack(reverse = TRUE)) +
geom_col() +
labs(x = NULL, y = "Number of Appearance") +
theme(legend.position = "none",axis.text.x  = element_text(angle=45, hjust=1, vjust=0.9))
p2<-spooky_first_two1 %>%
ggplot(aes(reorder(first_two,n), n, fill = author), position = position_stack(reverse = TRUE)) +
geom_col() +
labs(x = NULL, y = "Number of Appearance") +
theme(legend.position = "none")+
facet_wrap(~ author, ncol = 3, scales = "free") +
coord_flip()
layout <- matrix(c(1, 2), 2, 1, byrow = TRUE)
multiplot(p1, p2, layout = layout)
t3 <- spooky %>% select(author, text) %>% unnest_tokens(trigram, text, token = "ngrams", n = 3)
tri_sep <- t3 %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
tri_filt <- tri_sep %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word3 %in% stop_words$word)
# for later
trigram_counts <- tri_filt %>%
count(word1, word2, word3, sort = TRUE)
t3 <- tri_filt %>%
unite(trigram, word1, word2, word3, sep = " ")
sample_n(t3, 5)
t3_tf_idf <- t3 %>%
count(author, trigram) %>%
bind_tf_idf(trigram, author, n) %>%
arrange(desc(tf_idf))
t3_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(trigram = factor(trigram, levels = rev(unique(trigram)))) %>%
group_by(author) %>%
top_n(5, tf_idf) %>%
ungroup() %>%
ggplot(aes(trigram, tf_idf, fill = author)) +
geom_col() +
labs(x = NULL, y = "TF-IDF values") +
theme(legend.position = "none") +
facet_wrap(~ author, ncol = 3, scales = "free") +
coord_flip()
# for later
trigram_counts2 <- tri_sep %>%
count(word1, word2, word3, sort = TRUE)
t31 <- tri_sep %>%
unite(trigram, word1, word2, word3, sep = " ")
t3_tf_idf1 <- t31 %>%
count(author, trigram) %>%
bind_tf_idf(trigram, author, n) %>%
arrange(desc(tf_idf))
t3_tf_idf1 %>%
arrange(desc(tf_idf)) %>%
mutate(trigram = factor(trigram, levels = rev(unique(trigram)))) %>%
group_by(author) %>%
top_n(5, tf_idf) %>%
ungroup() %>%
ggplot(aes(trigram, tf_idf, fill = author)) +
geom_col() +
labs(x = NULL, y = "TF-IDF values") +
theme(legend.position = "none") +
facet_wrap(~ author, ncol = 3, scales = "free") +
coord_flip()+
scale_fill_brewer(palette = 'Accent')
##trigram of authors
trigrams_EAP <- spooky %>%
filter(author == "EAP") %>%
unnest_tokens(trigram, text, token = "ngrams",to_lower = TRUE, n= 3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
count(word1, word2,word3, sort = TRUE)
trigrams_HPL <- spooky %>%
filter(author == "HPL") %>%
unnest_tokens(trigram, text, token = "ngrams",to_lower = TRUE, n= 3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
count(word1, word2,word3, sort = TRUE)
trigrams_MWS <- spooky %>%
filter(author == "MWS") %>%
unnest_tokens(trigram, text, token = "ngrams",to_lower = TRUE, n= 3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
count(word1, word2,word3, sort = TRUE)
##may be a grap here about
##sentence generator
return_third_word <- function( woord1, woord2,authordata){
woord <- authordata %>%
filter_(~word1 == woord1, ~word2 == woord2) %>%
sample_n(1, weight = n) %>%
.[["word3"]]
if(length(woord) == 0){
bleh <- filter_(authordata, ~word1 == woord2) %>%
sample_n(1, weight = n)
warning("no word found, adding ", bleh, "to", woord1 , woord2)
woord <- bleh
}
woord
}
generate_sentence <- function(word1, word2,authordata, sentencelength =5, debug =FALSE){
#input validation
if(sentencelength <3)stop("I need more to work with")
sentencelength <- sentencelength -2
# starting
sentence <- c(word1, word2)
woord1 <- word1
woord2 <- word2
for(i in seq_len(sentencelength)){
if(debug == TRUE)print(i)
word <- return_third_word( woord1, woord2, authordata )
sentence <- c(sentence, word)
woord1 <- woord2
woord2 <- word
}
output <-paste(sentence, collapse = " ")
output
}
#generate_sentence("the", "man",trigrams_EAP, 15)
#generate_sentence("the", "man",trigrams_HPL, 15)
#generate_sentence("the", "man",trigrams_MWS, 15)
## find the first two world used most frequently by author.
## compile their psycho profile starting with their sanguan life world man value
createFE = function(ds)
{
ds = ds %>%
mutate(Ncommas = str_count(ds$text, ",")) %>%
mutate(Nsemicolumns = str_count(ds$text, ";")) %>%
mutate(Ncolons = str_count(ds$text, ":")) %>%
mutate(Nblank = str_count(ds$text, " ")) %>%
mutate(Nother = str_count(ds$text, "[\\.\\.]")) %>%
mutate(Ncapitalfirst = str_count(ds$text, " [A-Z][a-z]")) %>%
mutate(Ncapital = str_count(ds$text, "[A-Z]")) %>%
mutate(Nquestion = str_count(ds$text,"\\?"))
return(ds)
}
spooky_feature = createFE(spooky)
fillColor = "#FFA07A"
fillColor2 = "#F1C40F"
p1<-spooky_feature %>%
group_by(author) %>%
summarise(SumCommas = sum(Ncommas,na.rm = TRUE)) %>%
ungroup() %>%
mutate(author = reorder(author,SumCommas)) %>%
ggplot(aes(x = author,y = SumCommas)) +
geom_bar(stat='identity',colour="white", fill = fillColor2) +
geom_text(aes(x = author, y = 1, label = paste0("(",SumCommas,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'author',
y = 'Commas',
title = 'Total Number of Commas') +
coord_flip() +
theme_bw()
p2<-spooky_feature %>%
group_by(author) %>%
summarise(SumSemiColons = sum(Nsemicolumns,na.rm = TRUE)) %>%
ungroup() %>%
mutate(author = reorder(author,SumSemiColons)) %>%
ggplot(aes(x = author,y = SumSemiColons)) +
geom_bar(stat='identity',colour="white", fill = fillColor) +
geom_text(aes(x = author, y = 1, label = paste0("(",SumSemiColons,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'author',
y = 'SemiColons',
title = 'Total Number of SemiColons') +
coord_flip() +
theme_bw()
p3<-spooky_feature %>%
group_by(author) %>%
summarise(SumColons = sum(Ncolons,na.rm = TRUE)) %>%
ungroup() %>%
mutate(author = reorder(author,SumColons)) %>%
ggplot(aes(x = author,y = SumColons)) +
geom_bar(stat='identity',colour="white", fill = fillColor2) +
geom_text(aes(x = author, y = 1, label = paste0("(",SumColons,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'author',
y = 'Colons',
title = 'Total Number of Colons') +
coord_flip() +
theme_bw()
p4<-spooky_feature %>%
group_by(author) %>%
summarise(SumQuestions = sum(Nquestion,na.rm = TRUE)) %>%
ungroup() %>%
mutate(author = reorder(author,SumQuestions)) %>%
ggplot(aes(x = author,y = SumQuestions)) +
geom_bar(stat='identity',colour="white", fill = fillColor) +
geom_text(aes(x = author, y = 1, label = paste0("(",SumQuestions,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'author',
y = 'Questions',
title = 'Total Number of Questions') +
coord_flip() +
theme_bw()
layout <- matrix(c(1, 2, 3, 4), 2, 2, byrow = TRUE)
multiplot(p1, p2, p3,p4, layout = layout)
## Be careful because EAP appeared more ofen than others(there are more EAP sentenes)
spooky_feature %>%
group_by(author) %>%
summarise(SumCapital = sum(Ncapital,na.rm = TRUE)) %>%
ungroup() %>%
mutate(author = reorder(author,SumCapital)) %>%
ggplot(aes(x = author,y = SumCapital)) +
geom_bar(stat='identity',colour="white", fill = fillColor) +
geom_text(aes(x = author, y = 1, label = paste0("(",SumCapital,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'author',
y = 'Capital Letters',
title = 'author and Total Number of  Capital Letters') +
coord_flip() +
theme_bw()
#Number of words in a sentence
spooky_feature$Nwords <- sapply(gregexpr("\\W+", spooky_feature$text), length) + 1
ggplot(spooky_feature) +
geom_boxplot(aes(x=author, y=Nwords,fill=author))
ggplot(spooky_feature) +
geom_violin(aes(x=author, y=Nstop,sill=author))
View(spooky_feature)
#Number of words in a sentence
spooky_feature$Nwords <- sapply(gregexpr("\\W+", spooky_feature$text), length) + 1
ggplot(spooky_feature) +
geom_boxplot(aes(x=author, y=Nwords,fill=author))
#Number of stopwords in a sentence
nostopword<-as.data.frame(table(spooky_wrdnew$id))
names(nostopword)<-c("id","num_of_nostop_wrd")
spooky_feature<-merge(spooky_feature,nostopword,by="id")
spooky_feature$Nstop<-spooky_feature$Nwords - spooky_feature$num_of_nostop_wrd
ggplot(spooky_feature) +
geom_violin(aes(x=author, y=Nstop,sill=author))
#Number of negation words in a sentence
negation<-c("no","not","none","nobody","nothing","neither","nowhere","never","hardly","scarcely","barely","doesn't","isn't","wasn't","shouldn't","wouldn't","didn't","won't","can't","little","few","nor","neither","without","unless","wa'n't","dun't","dxn't","aren't","hasn't","couldn't","hadn't","don't","mustn't","ain't","haven't","wudn't","weren't")
spooky_wrd$negation <- spooky_wrd$word %in% negation
negationwrd<-as.data.frame(table(spooky_wrd$id[spooky_wrd$negation==T] ))
names(negationwrd)<-c("id","num_of_negation_wrd")
spooky_feature<-merge(spooky_feature,negationwrd,by="id",all=T)
spooky_feature$num_of_negation_wrd[is.na(spooky_feature$num_of_negation_wrd)]<-0
ggplot(spooky_feature) +
geom_density(aes(x=num_of_negation_wrd, colour=author,fill=author))
summary(spooky_feature)
createFE = function(ds)
{
ds = ds %>%
mutate(Ncommas = str_count(ds$text, ",")) %>%
mutate(Nsemicolumns = str_count(ds$text, ";")) %>%
mutate(Ncolons = str_count(ds$text, ":")) %>%
mutate(Nblank = str_count(ds$text, " ")) %>%
mutate(Nother = str_count(ds$text, "[\\.\\.]")) %>%
mutate(Ncapitalfirst = str_count(ds$text, " [A-Z][a-z]")) %>%
mutate(Ncapital = str_count(ds$text, "[A-Z]")) %>%
mutate(Nquestion = str_count(ds$text,"\\?"))
return(ds)
}
spooky_feature = createFE(spooky)
summary(spooky_feature)
#Number of words in a sentence
spooky_feature$Nwords <- sapply(gregexpr("\\W+", spooky_feature$text), length) + 1
summary(spooky_feature)
nostopword<-as.data.frame(table(spooky_wrdnew$id))
names(nostopword)<-c("id","num_of_nostop_wrd")
spooky_feature<-merge(spooky_feature,nostopword,by="id")
spooky_feature$Nstop<-spooky_feature$Nwords - spooky_feature$num_of_nostop_wrd
summary(spooky_feature)
#Number of negation words in a sentence
negation<-c("no","not","none","nobody","nothing","neither","nowhere","never","hardly","scarcely","barely","doesn't","isn't","wasn't","shouldn't","wouldn't","didn't","won't","can't","little","few","nor","neither","without","unless","wa'n't","dun't","dxn't","aren't","hasn't","couldn't","hadn't","don't","mustn't","ain't","haven't","wudn't","weren't")
spooky_wrd$negation <- spooky_wrd$word %in% negation
negationwrd<-as.data.frame(table(spooky_wrd$id[spooky_wrd$negation==T] ))
names(negationwrd)<-c("id","num_of_negation_wrd")
summary(spooky_feature)
createFE = function(ds)
{
ds = ds %>%
mutate(Ncommas = str_count(ds$text, ",")) %>%
mutate(Nsemicolumns = str_count(ds$text, ";")) %>%
mutate(Ncolons = str_count(ds$text, ":")) %>%
mutate(Nblank = str_count(ds$text, " ")) %>%
mutate(Nother = str_count(ds$text, "[\\.\\.]")) %>%
mutate(Ncapitalfirst = str_count(ds$text, " [A-Z][a-z]")) %>%
mutate(Ncapital = str_count(ds$text, "[A-Z]")) %>%
mutate(Nquestion = str_count(ds$text,"\\?"))
return(ds)
}
spooky_feature = createFE(spooky)
#Number of words in a sentence
spooky_feature$Nwords <- sapply(gregexpr("\\W+", spooky_feature$text), length) + 1
summary(spooky_feature)
#Number of stopwords in a sentence
nostopword<-as.data.frame(table(spooky_wrdnew$id))
names(nostopword)<-c("id","num_of_nostop_wrd")
spooky_feature1<-merge(spooky_feature,nostopword,by="id",all=T)
summary(spooky_feature1)
spooky_feature<-merge(spooky_feature,nostopword,by="id",all=T)
spooky_feature$num_of_nostop_wrd[is.na(spooky_feature$num_of_nostop_wrd)]<-0
spooky_feature$Nstop<-spooky_feature$Nwords - spooky_feature$num_of_nostop_wrd
summary(spooky_feature1)
summary(spooky_feature)
negation<-c("no","not","none","nobody","nothing","neither","nowhere","never","hardly","scarcely","barely","doesn't","isn't","wasn't","shouldn't","wouldn't","didn't","won't","can't","little","few","nor","neither","without","unless","wa'n't","dun't","dxn't","aren't","hasn't","couldn't","hadn't","don't","mustn't","ain't","haven't","wudn't","weren't")
spooky_wrd$negation <- spooky_wrd$word %in% negation
negationwrd<-as.data.frame(table(spooky_wrd$id[spooky_wrd$negation==T] ))
names(negationwrd)<-c("id","num_of_negation_wrd")
spooky_feature<-merge(spooky_feature,negationwrd,by="id",all=T)
spooky_feature$num_of_negation_wrd[is.na(spooky_feature$num_of_negation_wrd)]<-0
summary(spooky_feature)
#Number of words in a sentence
spooky_feature$Nwords <- sapply(gregexpr("\\W+", spooky_feature$text), length) + 1
ggplot(spooky_feature) +
geom_boxplot(aes(x=author, y=Nwords,fill=author))
#Number of stopwords in a sentence
nostopword<-as.data.frame(table(spooky_wrdnew$id))
names(nostopword)<-c("id","num_of_nostop_wrd")
spooky_feature<-merge(spooky_feature,nostopword,by="id",all=T)
spooky_feature$num_of_nostop_wrd[is.na(spooky_feature$num_of_nostop_wrd)]<-0
ggplot(spooky_feature) +
geom_density_ridges(aes(Nwords, author, fill = author)) +
scale_x_log10() +
theme(legend.position = "none") +
labs(x = "Number of Words")
ggplot(spooky_feature) +
geom_violin(aes(x=author, y=Nstop,fill=author))
ggplot(spooky_feature) +
geom_density_ridges(aes(Nstop, author, fill = author)) +
scale_x_log10() +
theme(legend.position = "none") +
labs(x = "Number of StopWords")
ggplot(spooky_feature) +
geom_density(aes(x=num_of_negation_wrd, colour=author,fill=author))
ggplot(spooky_feature) +
geom_density_ridges(aes(num_of_negation_wrd, author, fill = author)) +
scale_x_log10() +
theme(legend.position = "none") +
labs(x = "Number of Words")
ggplot(spooky_feature) +
geom_density(aes(x=num_of_negation_wrd, colour=author,fill=author))
ggplot(spooky_feature) +
geom_density_ridges(aes(num_of_negation_wrd, author, fill = author)) +
scale_x_log10() +
theme(legend.position = "none") +
labs(x = "Number of Negation Words")
ggplot(spooky_feature) +
geom_boxplot(aes(x=author, y=num_of_negation_wrd,fill=author))
p3 <- ggplot(spooky_feature) +
geom_density(aes(num_of_negation_wrd, fill = author), bw = 0.05, alpha = 0.3) + scale_x_log10() +
theme(legend.position = "none") +
ggplot(spooky_feature) +
geom_density(aes(num_of_negation_wrd, fill = author), bw = 0.05, alpha = 0.3) + scale_x_log10() +
theme(legend.position = "none") +
ggplot(spooky_feature) +
geom_density(aes(num_of_negation_wrd, fill = author), bw = 0.05, alpha = 0.3) + scale_x_log10() +
theme(legend.position = "none")
ggplot(spooky_feature) +
geom_density(aes(num_of_negation_wrd, fill = author), bw = 0.05, alpha = 0.3) +
scale_x_log10() +
theme(legend.position = "none") +
labs(x = "Number of Negation Words")
ggplot(spooky_feature) +
geom_boxplot(aes(x=author, y=num_of_negation_wrd,fill=author))
ggplot(spooky_feature) +
geom_density(aes(x=num_of_negation_wrd, colour=author,fill=author))
ggplot(spooky_feature) +
geom_density(aes(x=num_of_negation_wrd, colour=author,fill=author), bw = 0.05, alpha = 0.3)
ggplot(spooky_feature) +
geom_density_ridges(aes(num_of_negation_wrd, author, fill = author)) +
scale_x_log10() +
theme(legend.position = "none") +
labs(x = "Number of StopWords")
ggplot(spooky_feature) +
geom_density_ridges(aes(num_of_negation_wrd, author, fill = author))
ggplot(spooky_feature) +
geom_density_ridges(aes(num_of_negation_wrd, author, fill = author)) +
scale_x_log10()
ggplot(spooky_feature) +
geom_density_ridges(aes(num_of_negation_wrd, author, fill = author))
ggplot(spooky_feature) +
geom_density_ridges(aes(num_of_negation_wrd, author, fill = author)) +
theme(legend.position = "none") +
labs(x = "Number of Negation Words")
ggplot(spooky_feature) +
geom_density_ridges(aes(num_of_negation_wrd, author, fill = author), bw = 0.05, alpha = 0.3) +
theme(legend.position = "none") +
labs(x = "Number of Negation Words")
ggplot(spooky_feature) +
geom_density(aes(num_of_negation_wrd, fill = author), bw = 0.05, alpha = 0.3) +
scale_x_log10() +
theme(legend.position = "none") +
labs(x = "Number of Negation Words")
ggplot(spooky_feature) +
geom_boxplot(aes(x=author, y=num_of_negation_wrd,fill=author))
ggplot(spooky_feature) +
geom_density(aes(x=num_of_negation_wrd, colour=author,fill=author), bw = 0.05, alpha = 0.3)
View(spooky)
