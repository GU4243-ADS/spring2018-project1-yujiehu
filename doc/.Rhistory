generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
trigrams_HPL <- spooky %>%
filter(author == "HPL") %>%
unnest_tokens(trigram, text, token = "ngrams",to_lower = TRUE, n= 3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
count(word1, word2,word3, sort = TRUE)
trigrams_MWS <- spooky %>%
filter(author == "MWS") %>%
unnest_tokens(trigram, text, token = "ngrams",to_lower = TRUE, n= 3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
count(word1, word2,word3, sort = TRUE)
View(trigrams_HPL)
View(trigrams_MWS)
generate_sentence("the", "man", 9)
##sentence generator
return_third_word <- function( woord1, woord2,authordata){
woord <- authordata %>%
filter_(~word1 == woord1, ~word2 == woord2) %>%
sample_n(1, weight = n) %>%
.[["word3"]]
if(length(woord) == 0){
bleh <- filter_(authordata, ~word1 == woord2) %>%
sample_n(1, weight = n)
warning("no word found, adding ", bleh, "to", woord1 , woord2)
woord <- bleh
}
woord
}
generate_sentence <- function(word1, word2, sentencelength =5, debug =FALSE){
#input validation
if(sentencelength <3)stop("I need more to work with")
sentencelength <- sentencelength -2
# starting
sentence <- c(word1, word2)
woord1 <- word1
woord2 <- word2
for(i in seq_len(sentencelength)){
if(debug == TRUE)print(i)
word <- return_third_word( woord1, woord2, authordata )
sentence <- c(sentence, word)
woord1 <- woord2
woord2 <- word
}
output <-paste(sentence, collapse = " ")
output
}
generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
generate_sentence("the", "man", 9)
generate_sentence("the", "man",trigrams_EAP, 9)
generate_sentence("the", "man",trigrams_EAP, 9)
generate_sentence("the", "man",trigrams_EAP, 9)
generate_sentence("the", "man",trigrams_EAP, 9)
generate_sentence("the", "man",trigrams_EAP, 9)
return_third_word("the","man",trigrams_EAP)
return_third_word("the","man",trigrams_EAP)
return_third_word("the","man",trigrams_EAP)
return_third_word("the","man",trigrams_EAP)
return_third_word("the","man",trigrams_EAP)
return_third_word("the","man",trigrams_EAP)
return_third_word("the","man",trigrams_EAP)
return_third_word("the","man",trigrams_EAP)
return_third_word("the","man",trigrams_EAP)
return_third_word("the","man",trigrams_EAP)
return_third_word("the","man",trigrams_EAP)
return_third_word("the","man",trigrams_HPL)
return_third_word("the","man",trigrams_HPL)
return_third_word("the","man",trigrams_HPL)
return_third_word("the","man",trigrams_HPL)
return_third_word("the","man",trigrams_HPL)
return_third_word("the","man",trigrams_HPL)
return_third_word("the","man",trigrams_HPL)
return_third_word("the","man",trigrams_HPL)
return_third_word("the","man",trigrams_HPL)
return_third_word("the","man",trigrams_HPL)
return_third_word("the","man",trigrams_HPL)
return_third_word("the","man",trigrams_MWS)
return_third_word("the","man",trigrams_MWS)
return_third_word("the","man",trigrams_MWS)
return_third_word("the","man",trigrams_MWS)
return_third_word("the","man",trigrams_MWS)
return_third_word("the","man",trigrams_MWS)
return_third_word("the","man",trigrams_MWS)
#return_third_word("the","man",trigrams_MWS)
generate_sentence <- function(word1, word2,authordata, sentencelength =5, debug =FALSE){
#input validation
if(sentencelength <3)stop("I need more to work with")
sentencelength <- sentencelength -2
# starting
sentence <- c(word1, word2)
woord1 <- word1
woord2 <- word2
for(i in seq_len(sentencelength)){
if(debug == TRUE)print(i)
word <- return_third_word( woord1, woord2, authordata )
sentence <- c(sentence, word)
woord1 <- woord2
woord2 <- word
}
output <-paste(sentence, collapse = " ")
output
}
generate_sentence("the", "man",trigrams_EAP, 9)
generate_sentence("the", "man",trigrams_EAP, 9)
generate_sentence("the", "man",trigrams_EAP, 9)
generate_sentence("the", "man",trigrams_EAP, 9)
generate_sentence("the", "man",trigrams_EAP, 9)
generate_sentence("the", "man",trigrams_EAP, 9)
generate_sentence("the", "man",trigrams_EAP, 9)
generate_sentence("the", "man",trigrams_EAP, 9)
generate_sentence("the", "man",trigrams_WMS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_MWS, 9)
generate_sentence("the", "man",trigrams_HPL, 9)
generate_sentence("the", "man",trigrams_HPL, 9)
generate_sentence("the", "man",trigrams_HPL, 9)
generate_sentence("the", "man",trigrams_HPL, 9)
generate_sentence("the", "man",trigrams_HPL, 9)
generate_sentence("the", "man",trigrams_HPL, 9)
generate_sentence("the", "man",trigrams_HPL, 9)
generate_sentence("the", "man",trigrams_HPL, 9)
generate_sentence("the", "man",trigrams_HPL, 9)
generate_sentence("the", "man",trigrams_HPL, 9)
generate_sentence("the", "man",trigrams_HPL, 9)
generate_sentence("the", "man",trigrams_HPL, 9)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 35)
generate_sentence("the", "man",trigrams_HPL, 35)
generate_sentence("the", "man",trigrams_HPL, 35)
summary(spooky)
knitr::opts_chunk$set(echo=TRUE, error=FALSE)
t3 <- spooky %>% select(author, text) %>% unnest_tokens(trigram, text, token = "ngrams", n = 3)
View(t3)
tri_sep <- t3 %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
View(tri_sep)
tri_filt <- tri_sep %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word3 %in% stop_words$word)
View(tri_filt)
summary(tri_filt)
tri_filt <- tri_sep %>%
filter(!word1 %in% stop_words$word)
summary(tri_filt)
tail(tri_filt)
tri_filt <- tri_sep %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
tri_filt <- tri_sep %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word3 %in% stop_words$word)
# for later
trigram_counts <- tri_filt %>%
count(word1, word2, word3, sort = TRUE)
View(trigram_counts)
t3 <- tri_filt %>%
unite(trigram, word1, word2, word3, sep = " ")
sample_n(t3, 5)
View(tf_idf)
t3_tf_idf <- t3 %>%
count(author, trigram)
View(t3_tf_idf)
t3_tf_idf <- t3 %>%
count(author, trigram) %>%
bind_tf_idf(trigram, author, n)
t3_tf_idf <- t3 %>%
count(author, trigram) %>%
bind_tf_idf(trigram, author, n) %>%
arrange(desc(tf_idf))
summary(tri_filt)
tri_filt <- tri_sep %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word3 %in% stop_words$word)
# for later
trigram_counts <- tri_filt %>%
count(word1, word2, word3, sort = TRUE)
# for later
trigram_counts <- tri_filt %>%
count(word1, word2, word3, author,sort = TRUE)
# for later
trigram_counts <- tri_filt %>%
count(author,word1, word2, word3,sort = TRUE)
##add for sentence
trigram_countsEAP<-trigram_counts%>%
filter(author=="EAP")
View(trigram_countsEAP)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 15)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 9)
generate_sentence("the", "man",trigram_countsEAP , 5)
generate_sentence("the", "man",trigram_countsEAP , 5)
generate_sentence("the", "man",trigram_countsEAP , 5)
generate_sentence("the", "man",trigram_countsEAP , 5)
generate_sentence("the", "man",trigram_countsEAP , 5)
generate_sentence("the", "man",trigram_countsEAP , 5)
generate_sentence("the", "man",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("he", "he",trigram_countsEAP , 5)
generate_sentence("hu", "hu",trigram_countsEAP , 5)
generate_sentence("hu", "hu",trigram_countsEAP , 5)
generate_sentence("hu", "hu",trigram_countsEAP , 5)
generate_sentence("hu", "hu",trigram_countsEAP , 5)
generate_sentence("hu", "hu",trigram_countsEAP , 5)
generate_sentence("hu", "hu",trigram_countsEAP , 5)
generate_sentence("hu", "hu",trigram_countsEAP , 5)
generate_sentence("hu", "hu",trigram_countsEAP , 5)
generate_sentence("hu", "hu",trigram_countsEAP , 5)
generate_sentence("hu", "hu",trigram_countsEAP , 5)
generate_sentence("hu", "hu",trigram_countsEAP , 5)
generate_sentence("ha", "hu",trigram_countsEAP , 5)
generate_sentence("ha", "hu",trigram_countsEAP , 5)
generate_sentence("ha", "hu",trigram_countsEAP , 5)
generate_sentence("ha", "hu",trigram_countsEAP , 5)
generate_sentence("ha", "hu",trigram_countsEAP , 5)
generate_sentence("ha", "hu",trigram_countsEAP , 5)
generate_sentence("ha", "hu",trigram_countsEAP , 5)
generate_sentence("ha", "hu",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("ha", "eye",trigram_countsEAP , 5)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
generate_sentence("the", "man",trigrams_HPL, 15)
View(trigrams_EAP)
?wordcloud
?wordcloud2
??wordcloud2
library(wordcloud2)
View(spooky_wrd)
wor<-group_by(spooky_wrd,author)
View(wor)
?group_by
wor<-count(spooky_wrd,author)
words <- count(group_by(spooky_wrd, author))
View(words)
wor<-table(spooky_wrd,author)
wor<-table(spooky_wrd)
cloudEAP<-spooky_wrd%>%
filter(author=="EAP")%>%
table()%>%
as.data.frame()
spooky_wrd <- unnest_tokens(spooky, word, text)
spooky_wrdnew <- anti_join(spooky_wrd, stop_words, by = "word")
words_author <- get_common_words_by_author(x = spooky_wrd,
author = "EAP",
remove.stopwords = TRUE)
?get_common_words_by_author
??get_common_words_by_author
get_common_words_by_author <- function(x, author, remove.stopwords = FALSE){
if(remove.stopwords){
x <- x %>% dplyr::anti_join(stop_words)
}
x[x$author == author,] %>%
dplyr::count(word, sort = TRUE)
}
words_author <- get_common_words_by_author(x = spooky_wrd,
author = "EAP",
remove.stopwords = TRUE)
View(words_author)
mypal <- brewer.pal(8,"Spectral")
wordcloud(words = c("EAP", words_author$word),
freq = c(max(words_author$n) + 100, words_author$n),
colors = mypal,
scale=c(7,.5),
rot.per=.15,
max.words = 100,
random.order = F)
wordcloud(words = c("EAP", words_EAP$word),
freq = c(max(words_author$n) + 100, words_author$n),
colors = mypal,
scale=c(7,.5),
rot.per=.15,
max.words = 100,
random.order = F)
words_EAP <- get_common_words_by_author(x = spooky_wrd,
author = "EAP",
remove.stopwords = TRUE)
wordcloud(words = c("EAP", words_EAP$word),
freq = c(max(words_author$n) + 100, words_EAP$n),
colors = mypal,
scale=c(7,.5),
rot.per=.15,
max.words = 100,
random.order = F)
?wordcloud2
?wordcloud
eap<-c("EAP",max(words_EAP$n) + 100)
eap<-c("EAP",max(words_EAP$n) + 100)
words_EAP<-rbind(eap,words_EAP)
wordcloud2(words_EAP,size=1) #size 调大小 特简单
wordcloud2(words_EAP) #size 调大小 特简单
View(words_EAP)
wordcloud2(words_author) #size 调大小 特简单
wordcloud2(words_EAP[1:50,])
eap<-c("eap",max(words_EAP$n) + 100)
max(words_EAP$n)
words_EAP <- get_common_words_by_author(x = spooky_wrd,
author = "EAP",
remove.stopwords = TRUE)
eap<-c("eap",max(words_EAP$n) + 100)
words_EAP<-rbind(eap,words_EAP)
wordcloud2(words_EAP[1:50,])
wordcloud2(words_EAP[2:50,])
wordcloud2(words_EAP[3:50,])
words_EAP <- get_common_words_by_author(x = spooky_wrd,
author = "EAP",
remove.stopwords = TRUE)
max(words_EAP$n) + 100
class(max(words_EAP$n) + 100)
eap<-c("eap",max(words_EAP$n) + 100)
words_EAP<-rbind(eap,words_EAP)
wordcloud2(words_EAP[3:50,])
class(words_EAP$word)
class(words_EAP$n)
words_EAP <- get_common_words_by_author(x = spooky_wrd,
author = "EAP",
remove.stopwords = TRUE)
eap<-c("eap",max(words_EAP$n) + 100)
words_EAP<-c(eap,words_EAP)
words_EAP <- get_common_words_by_author(x = spooky_wrd,
author = "EAP",
remove.stopwords = TRUE)
words_EAP<-c("eap",max(words_EAP$n) + 100)
words_EAP <- get_common_words_by_author(x = spooky_wrd,
author = "EAP",
remove.stopwords = TRUE)
eap<-c("EAP",max(words_EAP$n) + 100)
words_EAP<-rbind(eap,words_EAP)
words_EAP <- get_common_words_by_author(x = spooky_wrd,
author = "EAP",
remove.stopwords = TRUE)
eap<-c("EAP",max(words_EAP$n) + 100)
words_EAP<-rbind(eap,words_EAP)
words_EAP<-c(words_EAP$word,as.numeric(words_EAP$n))
words_EAP <- get_common_words_by_author(x = spooky_wrd,
author = "EAP",
remove.stopwords = TRUE)
eap<-c("EAP",max(words_EAP$n) + 100)
words_EAP<-rbind(eap,words_EAP)
words_EAP$n<-as.numeric(words_EAP$n)
wordcloud2(words_EAP[1:50,])
wordcloud2(words_EAP[1:50,],
colors = mypal,
scale=c(7,.5),
rot.per=.15,
max.words = 100,
random.order = F)
wordcloud2(words_EAP[1:50,],
colors = mypal)
mypal <- brewer.pal(8,"Spectral")
wordcloud2(words_EAP[1:50,],
colors = mypal)
wordcloud2(words_EAP[1:50,],
color = mypal)
mypal <- brewer.pal(18,"Spectral")
mypal <- brewer.pal(11,"Spectral")
wordcloud2(words_EAP[1:50,],
color = mypal)
wordcloud2(words_EAP[1:50,],
color = random-dark)
wordcloud2(words_EAP[1:50,],
color = 'random-dark')
wordcloud2(words_EAP[1:50,],
color = mypal)
wordcloud2(words_EAP[1:50,],
color = 'random-dark')
wordcloud2(words_EAP[1:50,],
color = 'random-dark',backgroundColor = "grey")
wordcloud2(words_EAP[1:50,],
color = 'random-dark',backgroundColor = "grey",rotateRatio = 1)
wordcloud2(words_EAP[1:50,],
color = mypal,backgroundColor = "grey")
wordcloud2(words_EAP[1:50,],
color = mypal,backgroundColor = "grey",figPath = "/Users/mac/Downloads/sqiudy.jpg")
wordcloud2(words_EAP[1:50,],
color = mypal,backgroundColor = "grey",figPath = "/Users/mac/Downloads/1.png")
wordcloud2(words_EAP[1:50,],
color = mypal,figPath = "/Users/mac/Downloads/1.png")
wordcloud2(words_EAP[1:50,],
color = mypal,figPath = "/Users/mac/Downloads/1.png")
wordcloud2(words_EAP[1:50,],
color = mypal,figPath = "/Users/mac/Downloads/sqiudy.jpg")
wordcloud2(words_EAP[1:50,],
color = mypal,word = "EAP"
)
letterCloud(words_EAP[1:50,],
color = mypal,word = "EAP"
)
letterCloud(words_EAP[1:50,],
word = "EAP"
)
letterCloud(words_EAP[1:50,],
word = "EAP",color="white", backgroundColor="pink"
)
letterCloud(words_EAP,
word = "EAP",color="white", backgroundColor="pink"
)
letterCloud(words_EAP,
word = "EAP",color="white", backgroundColor="pink")
letterCloud(demoFreq, word = "R", size = 2)
letterCloud(demoFreq, word = "R", size = 2)
word = "EAP",color="white", backgroundColor="pink")
letterCloud(words_EAP,word = "EAP",color="white", backgroundColor="pink")
setTimeout(()=>{
WordCloud(word_canvas, options);
