sum2014_2017<-[a,b,c,d]
sum2014_2017<-(43930.04,54858.87,84506.1,103102)
sum2014<-(43930.04,54858.87,84506.1,103102)
sum2014<-[43930.04,54858.87,84506.1,103102]
sum2014<-c(43930.04,54858.87,84506.1,103102）
numbers<-c(43930.04,54858.87,84506.1,103102）
numbers<-c(43930.04,54858.87,84506.1,103102)
plot(numbers)
line(numbers)
plot(numbers，pch=c(15))
plot(numbers,pch=c(15))
plot(numbers,ylim=c(0,maxz),pch=c(15))
plot(numbers,type="o",pch=c(15))
a<-sum(a2014$Profit)
a2014<-Super_Store_Office_Supplies_Raw[1:1993,]
View(Super_Store_Office_Supplies_Raw)
library(readxl)
Super_Store_Office_Supplies_Raw <- read_excel("~/Desktop/5700/Super_Store_Office_Supplies_Raw.xlsx")
View(Super_Store_Office_Supplies_Raw)
View(Super_Store_Office_Supplies_Raw)
arrange(Super_Store_Office_Supplies_Raw,Super_Store_Office_Supplies_Raw$`Order Date`)
rank(Super_Store_Office_Supplies_Raw$`Order Date`)
summary(Super_Store_Office_Supplies_Raw)
aggregate(Super_Store_Office_Supplies_Raw[, 4:23], list(Super_Store_Office_Supplies_Raw$Region), mean)
a2014<-Super_Store_Office_Supplies_Raw[1:1993,]
a2015<-Super_Store_Office_Supplies_Raw[1994:4095,]
a2016<-Super_Store_Office_Supplies_Raw[4096:6682,]
a2017<-Super_Store_Office_Supplies_Raw[6683:9994,]
summary(a2014$Profit)
barplot(a2014$Profit)
a<-(a2015,a2015,a2016,a2017)
barplot(a2015$Profit)
barplot(a2016$Profit)
a<-sum(a2014$Profit)
b<-sum(a2015$Profit)
c<-sum(a2016$Profit)
d<-sum(a2017$Profit)
numbers<-c(43930.04,54858.87,84506.1,103102)
plot(numbers,type="o",pch=c(15))
line(numbers)
plot(numbers,type="o",pch=c(15)，xlim="year")
plot(numbers,type="o",pch=c(15)，xlim="year")
?plot
plot(numbers,type="o",pch=c(15)，xlab ="year")
plot(numbers,type="o",pch=c(15),xlab="year")
plot(numbers,type="o",pch=c(15),xlab="Year",ylab="Profit")
load("/Users/mac/Desktop/project/BMW/dflead.Rdata")
shinydata<-dfleadnonlead[,c(1,2,18:24)]
shinydata<-shinydata[,c(-7,-8)]
names(shinydata)[2]<-"Lead.Complete(Real)"
shinydata$Lead.Complete<-predict2.
names(shinydata)[8]<-"Lead.Probability(Predicted)"
dfleadnonlead1<- dfleadnonlead[, c(2,4:17,20, 23,22)]
#dfleadnonlead1<-na.omit(dfleadnonlead1)
dfleadnonlead1$Geo.Country[which(dfleadnonlead1$Geo.Country!="usa")]<-"other country"
#dfleadnonlead1$Geo.Country<-as.factor(dfleadnonlead1$Geo.Country)
dfleadnonlead2<- apply(dfleadnonlead1,2,as.factor)
dfleadnonlead2<-as.data.frame(dfleadnonlead2)
dfleadnonlead2$Lead.Complete<-as.numeric(dfleadnonlead2$Lead.Complete)
dfleadnonlead2$Visit.Num<-as.numeric(dfleadnonlead2$Visit.Num)
dfleadnonlead2$Lead.Complete<-dfleadnonlead2$Lead.Complete-1
sample<-sample.int(n=nrow(dfleadnonlead),size=floor(0.75*nrow(dfleadnonlead)),replace=F)
train<-dfleadnonlead2[sample, ]
test<-dfleadnonlead2[-sample, ]
glm<-glm(Lead.Complete ~.,family="binomial",data=train)
summary(glm)
#逐步回归
stepglm<-step(glm,direction = "both")
summary(stepglm)
real <- test$Lead.Complete
#predict函数可以获得模型的预测值。这里预测所需的模型对象为pre，预测对象newdata为测试集,预测所需类型type选择response,对响应变量的区间进行调整
predict. <- predict.glm(glm,type='response',newdata=test)
#按照预测值为1的概率，>0.5的返回1，其余返回0
predict =ifelse(predict.>0.5,1,0)
##ROC 模型精确度检验
library(pROC)
modelroc <- roc(real,predict.)
plot(modelroc, print.auc=TRUE, auc.polygon=TRUE,legacy.axes=TRUE, grid=c(0.1, 0.2),
grid.col=c("green", "red"), max.auc.polygon=TRUE,
auc.polygon.col="skyblue", print.thres=TRUE)        #画出ROC曲线，标出坐标，并标出AUC的值
##检验预测精度
res <- data.frame(real,predict )
table(real,predict =ifelse(predict>0.5,'lead','notlead'))
glm2<-glm(formula = Lead.Complete ~ BYO + Order.Now + Special.Offers +
Gallery + Specifications + Lease + Estimate.Pay, family = "binomial",
data = train)
summary(glm2)
coef(glm2)
real<- test$Lead.Complete
#predict函数可以获得模型的预测值。这里预测所需的模型对象为pre，预测对象newdata为测试集,预测所需类型type选择response,对响应变量的区间进行调整
predict2. <- predict.glm(glm2,type='response',newdata=test)
#按照预测值为1的概率，>0.5的返回1，其余返回0
predict2 =ifelse(predict2.>mean(predict2.),1,0)
summary(predict2.)
##ROC 模型精确度检验
library(pROC)
modelroc2 <- roc(real,predict2.)
plot(modelroc2, print.auc=TRUE, auc.polygon=TRUE,legacy.axes=TRUE, grid=c(0.1, 0.2),
grid.col=c("green", "red"), max.auc.polygon=TRUE,
auc.polygon.col="skyblue", print.thres=TRUE)        #画出ROC曲线，标出坐标，并标出AUC的值
##检验预测精度
res2 <- data.frame(real,predict2 )
table(real,predict2 =ifelse(predict2>mean(predict2.),'lead','notlead'))
error = predict2-real
accuracy = (nrow(test)-sum(abs(error)))/nrow(test) #精确度--判断正确的数量占总数的比例
accuracy
View(shinydata)
shinydata$Lead.Complete<-predict2.
names(shinydata)[8]<-"Lead.Probability(Predicted)"
a<-predict2.
boxplot(a)
a[which(a>0.05)]<-mean(a)
boxplot(a)
a[which(a>0.01)]<-mean(a)
boxplot(a)
a<-(a-min(a))/(max(a)-min(a))
boxplot(a)
summary(a)
a[which(a>0.6)]<-mean(a)
summary(a)
summary(a)
boxplot(a)
a<-(a-min(a))/(max(a)-min(a))
boxplot(a)
summary(a)
table(a)
a<-a+1
a<-a-1
a<-a+0.1
summary(a)
a<-(a-min(a))/(max(a)-min(a))
summary(a)
shinydata$leadprobability<-a
library(readr)
LeadsFull_Verified_CleanV3 <- read_csv("Desktop/project/BMW/Columbia/Leads Data/LeadsFull_Verified_CleanV3.csv")
View(LeadsFull_Verified_CleanV3)
data<-LeadsFull_Verified_CleanV3[,c( "City","Zip_Code","Latitude","Longitude",
)]
data<-LeadsFull_Verified_CleanV3[,c( "City","Zip_Code","Latitude","Longitude"
)]
data$City<-tolower(data$City)
data<-unique(data)
shiny<-merge(data,shinydata,by.x = "City",by.y = "Geo.City",all = T)
View(shiny)
which(shiny$Zip_Code==NA)
is.na(shiny$Zip_Code)
sum(is.na(shiny$Zip_Code))
which(is.na(shiny$Zip_Code))
shiny1<-shiny[-which(is.na(shiny$Zip_Code)),]
View(shiny1)
summary(shiny1$`Lead.Complete(Real)`)
table(shiny1)
table(shiny1$`Lead.Complete(Real)`)
names(shiny1)
shiny1<-shiny1[, c("user.ID","City","Geo.Region","Geo.Country", "Zip_Code",
"Latitude","Longitude","First.Hit.Referrer","Model.Selected",
"Lead.Complete(Real)","Lead.Probability(Predicted)" ,"leadprobability"       )]
save(shiny1,file = "RData")
save(shiny1,file = "RData")
write.csv(shiny1,file = "shiny.csv")
names(shiny1)
summary(glm2)
summary(glm)
#cleaning
#merge angellist& CB
library(readr)
library(maps)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
library(ggplot2)
library(dplyr)
mapStates = map("state", fill = TRUE, plot = FALSE)
plot(mapStates)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
library(leaflet)
install.packages("leaflet")
library(leaflet)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
install.packages("knitr")
version
install.packages("datasets")
library(datasets)
summary(iris)
dim(iris)
?sample.int
sample.int(iris,size = 100)
sample.int(n=iris,size = 100)
install.packages("class")
install.packages("ISLR")
library(ISLR)
baseball<-Hitters
dim(baseball)
summary(baseball)
#6b
baseball<-na.omit(baseball)
#6c
dim(baseball)
?pairs
#6f
pairs(baseball(,[1:7]))
#6f
pairs(baseball[,1:7])
View(baseball)
#6g
#may be correlated: Atbat and Hits
#unlikely correlated:Atbat and Years
#unlikely to be uncorrelated:Atbat and Hits
#6h
baseball$high_rbi<-rep("No",length(baseball$Salary))
baseball$high_rbi[baseball$RBI>75]="Yes"
baseball$high_rbi<-factor(baseball$high_rbi)
#6i
class(high_rbi)
#6i
class(baseball$high_rbi)
baseball$high_rbi1<-ifelse(baseball$RBI>75,"Yes","No")
baseball$high_rbi==baseball$high_rbi1
#baseball$high_rbi1<-ifelse(baseball$RBI>75,"Yes","No")
#baseball$high_rbi1<-factor(baseball$high_rbi1)
#baseball$high_rbi==baseball$high_rbi1
#6i
class(baseball$high_rbi)
#6j
dim(baseball)
#6k
sum(baseball$high_rbi=="Yes")
#6k
sum(baseball$high_rbi=="Yes")/dim(baseball)[1]
#6k
percentage<-sum(baseball$high_rbi=="Yes")/dim(baseball)[1]
percentage*100%
paste(percentage*100,"%",sep="")
round(percentage,2)
round(percentage,4)
paste(a*100,"%",sep="")
a<-round(percentage,4)
paste(a*100,"%",sep="")
boxplot(baseball$Salary,baseball$high_rbi)
plot(baseball$Salary,baseball$high_rbi)
#7a
sapply(baseball[,1:7], range)
range(baseball$AtBat
)
#7a
sapply(baseball[,1:7], range)
#7b
sapply(baseball[,1:7], mean)
sapply(baseball[,1:7], sd)
a<-c(3,5,6,2,53,6,31,9)
a[]1
a[1]
a%%2
vector%%2==1
a%%2==1
a[a%%2==1]
sum(vector[vector%%2==1])
sum(a[a%%2==1])
sum=0
Question2a<-function(a){
if a[a%%2==1]
sum=sum+a[a%%2==1]
}
Question2a<-function(a){
if {a[a%%2==1]
sum=sum+a[a%%2==1]
}}
Question2a<-function(a){
if (a[a%%2==1])
sum=sum+a[a%%2==1]
}
summary(iris)
?knn
?class::knn
iris
train<-
test<-
#b
train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
iris3
cl
knn(train, test, cl, k = 3, prob=TRUE)
#a
library(class)
knn(train, test, cl, k = 3, prob=TRUE)
attributes(.Last.value)
knn(train, test, cl, k = 3, prob=TRUE)
knn(train, test, cl, k = 3, prob=TRUE)
k = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50)
knn(train, test, cl, k , prob=TRUE)
for (i in 1:length(k)){
knn(train, test, cl, k = k[i], prob=TRUE)
}
for (i in 1:length(k)){
knn(train, test, cl, k = k[i], prob=TRUE)
}
for (i in 1:length(k)){
knn(train, test, cl, k = k[i], prob=TRUE)
print(  knn(train, test, cl, k = k[i], prob=TRUE)
)
}
#a
vector<-c(12,55,23,76,89,42,9,2,4,6,7)
#b
sum(vector[vector%%2==1])
Question2a<-function(a){
if (a[a%%2==1])
sum=sum+a[a%%2==1]
}
Question2a(vector)
sum<-0
Question2a<-function(a){
if (a[a%%2==1])
sum=sum+a[a%%2==1]
}
Question2a(vector)
Question2a<-function(a){
for (i in 1:length(a)){
if (a[i]%%2==1)
sum=sum+a[i]
}
}
Question2a(vector)
sum
Question2a(vector)
print(sum)
Question2a<-function(a){
for (i in 1:length(a)){
if (a[i]%%2==1)
sum=sum+a[i]
}
print(sum)
}
Question2a(vector)
#b
sum(vector[vector%%2==1])
view(iris)
View(iris)
?simpleCondition
?simple.int
?sample
sample(1:10, 4, replace = FALSE, prob = NULL)
set.seed(1)
sample <- sample.int(n = nrow(iris), size = 100, replace = F)
train <- data[sample, ]
train <- iris[sample, ]
test  <- iris[-sample, ]
#b
knn(train, test, k = 3, prob=TRUE)
#b
knn(train, test,cl, k = 3, prob=TRUE)
#b
knn(train, test,train$Species, k = 3, prob=TRUE)
#b
knn(train, test,factor(train$Species), k = 3, prob=TRUE)
View(test)
View(train)
#b
knn(train, test,cl=factor(train$Species), k = 3)
sample <- sample.int(n = nrow(iris), size = 100, replace = F)
train <- iris[sample, 1:4]
test  <- iris[-sample, 1:4]
train_label<-iris[sample,5]
test_label<-iris[-sample,5]
#b
knn(train, test,cl=train_label, k = 3)
table（test_label,iris_pred)
test_pred<-knn(train, test,cl=train_label, k = 3)
table(test_label,test_pred)
k = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50)
for (i in 1:length(k)){
test_pred<-knn(train, test,cl=train_label, k = k[i])
table(test_label,test_pred)
}
for (i in 1:length(k)){
test_pred<-knn(train, test,cl=train_label, k = k[i])
print(table(test_label,test_pred))
}
length(k)
b<-c(1:length(k))
for (i in 1:length(k)){
test_pred<-knn(train, test,cl=train_label, k = k[i])
b<-c(1:length(k))
b[i]<-50-sum(diag(table(test_label,test_pred)))
print(b)
}
for (i in 1:length(k)){
test_pred<-knn(train, test,cl=train_label, k = k[i])
b<-c(1:length(k))
b[i]<-50-sum(diag(table(test_label,test_pred)))
}
print(b)
b<-c(1:length(k))
for (i in 1:length(k)){
test_pred<-knn(train, test,cl=train_label, k = k[i])
b[i]<-sum(diag(table(test_label,test_pred)))
}
print(b)
print(50-b)
misclassed<-50-b
print(misclassed)
cat("the misclassified number for each k is :",misclassed,"\n")
#a
plot(k,misclassed)
#b
plot(log(k),misclassed)
#c
knn(train, test,cl=train_label, k = k[1:14]
#c
knn(train, test,cl=train_label, k = k[1:14])
#c
knn(train, test,cl=train_label, k = k[1])
#c
knn(train, test,cl=train_label, k = k[1:3])
baseball$high_run<-rep("Not elite",length(baseball$Runs))
baseball$high_run[baseball$Runs>80]="Elite"
baseball$high_run<-factor(baseball$high_run)
#6m
#6m
percentage<-sum(baseball$high_rbi=="Yes" & baseball$high_run=="Elite")/dim(baseball)[1]
a<-round(percentage,4)
paste(a*100,"%",sep="")
print("11.03% player have high RBI and high Runs")
paste(a*100,"%",sep="")
a<-round(percentage,4)
paste(a*100,"%",sep="")
#6k
percentage<-sum(baseball$high_rbi=="Yes")/dim(baseball)[1]
a<-round(percentage,4)
paste(a*100,"%",sep="")
#6n
boxplot(baseball$Salary,baseball$high_run)
#sca包里有个percent(p, d = 0, sep = " ")
#6l
boxplot(baseball$Salary,baseball$high_rbi)
#6n
boxplot(baseball$high_run,baseball$Salary)
?boxplot
#6n
boxplot(Salary~high_run,data=baseball)
#sca包里有个percent(p, d = 0, sep = " ")
#6l
boxplot(Salary~high_rbi,data=baseball)
?hist
#6o
hist(baseball$Hits)
#6o
hist(baseball$Hits,baseball$HmRun)
par(mfrow=c(2,2))
hist(baseball$Hits)
hist(baseball$HmRun)
hist(baseball$Runs)
hist(baseball$RBI)
par(mar=c(1,1,1,1))
hist(baseball$Hits)
hist(baseball$HmRun)
hist(baseball$Runs)
hist(baseball$RBI)
#7c
sapply(baseball[-20:-60,], range)
#7c
sapply(baseball[-(20:60),], range)
#7a
sapply(baseball[,1:7], range)
#7c
sapply(baseball[-(20:60),1:7], range)
sapply(baseball[-(20:60),1:7], range)
sapply(baseball[-(20:60),1:7], mean)
sapply(baseball[-(20:60),1:7], sd)
---
title: "Some Simple SPOOKY Data Analysis"
author: "Cindy Rush"
date: "January 22, 2018"
output:
pdf_document: default
html_document: default
---
# Introduction
This files contains some simple analysis of the SPOOKY data.  The goal is to remind ourselves of some of our basic tools for working with text data in `R` and also to practice reproducibility.  You should be able to put this file in the `doc` folder of your `Project 1` repository and it should just run (provided you have `multiplot.R` in the `libs` folder and `spooky.csv` in the `data` folder).  If you open to file from a forked `Week1-GitHub` repo, you should have no trouble running the code directly.
## Setup the libraries
First we want to install and load libraries we need along the way.  Note that the following code is completely reproducible -- you don't need to add any code on your own to make it run.
```{r, message = F, warning = F}
packages.used <- c("ggplot2", "dplyr", "tidytext", "wordcloud", "stringr", "ggridges")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used, intersect(installed.packages()[,1], packages.used))
# install additional packages
if(length(packages.needed) > 0) {
install.packages(packages.needed, dependencies = TRUE, repos = 'http://cran.us.r-project.org')
}
library(ggplot2)
library(dplyr)
library(tidytext)
library(wordcloud)
library(stringr)
library(ggridges)
source("../libs/multiplot.R")
## Read in the data
The following code assumes that the dataset `spooky.csv` lives in a `data` folder (and that we are inside a `docs` folder).
```{r}
spooky <- read.csv('../data/spooky.csv', as.is = TRUE)
```
source("../libs/multiplot.R")
getwd()
source("../libs/multiplot.R")
source("../libs/multiplot.R")
source("../libs/multiplot.R")
setwd("~/Documents/GitHub/spring2018-project1-yujiehu/lib")
source("../libs/multiplot.R")
?source
